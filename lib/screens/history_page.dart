import 'package:flutter/material.dart';
import 'package:lucide_icons/lucide_icons.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:share_plus/share_plus.dart';
import 'package:intl/intl.dart';
import '../services/firebase_service.dart';
import '../services/pdf_report_service.dart';
import '../models/ecg_session.dart';
import 'session_detail_screen.dart';
import 'patient_info_dialog.dart';

class HistoryPage extends StatefulWidget {
  final User user;

  const HistoryPage({
    super.key,
    required this.user,
  });

  @override
  State<HistoryPage> createState() => _HistoryPageState();
}

class _HistoryPageState extends State<HistoryPage> with AutomaticKeepAliveClientMixin {
  List<ECGSession> _sessions = [];

  @override
  bool get wantKeepAlive => true;

  @override
  void initState() {
    super.initState();
    _loadSessions();
  }

  @override
  void didUpdateWidget(HistoryPage oldWidget) {
    super.didUpdateWidget(oldWidget);
    // Reload sessions if the user changed
    if (oldWidget.user.uid != widget.user.uid) {
      _loadSessions();
    }
  }

  void _loadSessions() async {
    try {
      print('🔄 Loading ECG sessions for user: ${widget.user.uid}');
      
      // Load sessions from Firestore
      final sessionMaps = await FirebaseService.getECGSessions(widget.user.uid);
      print('✅ Got ${sessionMaps.length} session maps from Firestore');
      
      if (sessionMaps.isNotEmpty) {
        print('📊 Sample session data keys: ${sessionMaps.first.keys.toList()}');
        print('📊 Sample session timestamp: ${sessionMaps.first['timestamp']}');
        print('📊 Sample session timestamp type: ${sessionMaps.first['timestamp'].runtimeType}');
      }
      
      if (mounted) {
        final firestoreSessions = <ECGSession>[];
        
        for (int i = 0; i < sessionMaps.length; i++) {
          try {
            final session = ECGSession.fromFirestore(sessionMaps[i]);
            firestoreSessions.add(session);
            print('✅ Successfully converted session $i: ${session.sessionName}');
          } catch (conversionError) {
            print('❌ Error converting session $i: $conversionError');
            print('❌ Session data keys: ${sessionMaps[i].keys.toList()}');
            
            // Try to create a minimal session as fallback
            try {
              final fallbackSession = ECGSession(
                userId: sessionMaps[i]['userId'] as String?,
                sessionName: sessionMaps[i]['sessionName'] as String? ?? 'Session ${i + 1}',
                timestamp: DateTime.now(),
                duration: Duration(seconds: 30),
                ecgData: [],
                avgBPM: 75.0,
                minBPM: 60.0,
                maxBPM: 90.0,
              );
              firestoreSessions.add(fallbackSession);
              print('✅ Created fallback session $i');
            } catch (fallbackError) {
              print('❌ Fallback session creation failed: $fallbackError');
            }
          }
        }
        
        setState(() {
          _sessions = firestoreSessions..sort((a, b) => b.timestamp.compareTo(a.timestamp));
        });
        
        print('✅ Successfully loaded ${_sessions.length} sessions into UI');
      }
    } catch (e) {
      print('❌ Error loading sessions: $e');
      if (mounted) {
        setState(() {
          _sessions = [];
        });
      }
      
      // Run debug to help diagnose the issue
      try {
        final debugInfo = await FirebaseService.debugHistoryIssue();
        print('🔍 History Debug: $debugInfo');
      } catch (debugError) {
        print('❌ Debug failed: $debugError');
      }
    }
  }

  String _formatDateTime(DateTime dateTime) {
    final now = DateTime.now();
    final difference = now.difference(dateTime);

    if (difference.inDays == 0) {
      return 'Today, ${DateFormat('h:mm a').format(dateTime)}';
    } else if (difference.inDays == 1) {
      return 'Yesterday, ${DateFormat('h:mm a').format(dateTime)}';
    } else {
      return DateFormat('MMM d, h:mm a').format(dateTime);
    }
  }

  void _shareRecord(ECGSession session) {
    final text = '''
ECG Recording Summary
Date: ${DateFormat('MMM d, yyyy h:mm a').format(session.timestamp)}
Duration: ${session.duration.inSeconds}s
Average BPM: ${session.avgBPM.round()}
Heart Rate Range: ${session.minBPM.round()} - ${session.maxBPM.round()} BPM
Rhythm: ${session.rhythm}
Status: ${session.status}

Generated by Cardiart
''';
    
    Share.share(text, subject: 'ECG Recording - ${_formatDateTime(session.timestamp)}');
  }

  void _generateProfessionalReport(ECGSession session) {
    showDialog(
      context: context,
      builder: (context) => PatientInfoDialog(
        isDarkMode: Theme.of(context).brightness == Brightness.dark,
        onSubmit: (patientInfo) async {
          _showLoadingDialog();
          
          try {
            final pdfFile = await PDFReportService.generateECGReport(
              session: session,
              patientName: patientInfo['name']!,
              patientAge: patientInfo['age']!,
              patientGender: patientInfo['gender']!,
              patientHeight: patientInfo['height']!,
              patientWeight: patientInfo['weight']!,
              reportId: DateTime.now().millisecondsSinceEpoch.toString(),
            );
            
            Navigator.of(context).pop(); // Close loading dialog
            
            _showReportOptionsDialog(pdfFile, patientInfo['name']!);
          } catch (e) {
            Navigator.of(context).pop(); // Close loading dialog
            _showErrorDialog('Failed to generate report: $e');
          }
        },
      ),
    );
  }

  void _showLoadingDialog() {
    final theme = Theme.of(context);
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => Dialog(
        backgroundColor: theme.colorScheme.surface,
        child: Padding(
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              CircularProgressIndicator(
                valueColor: AlwaysStoppedAnimation<Color>(theme.colorScheme.primary),
              ),
              const SizedBox(height: 16),
              Text(
                'Generating Professional Report...',
                style: TextStyle(
                  color: theme.colorScheme.onSurface,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _showReportOptionsDialog(dynamic pdfFile, String patientName) {
    final theme = Theme.of(context);
    showDialog(
      context: context,
      builder: (context) => Dialog(
        backgroundColor: theme.colorScheme.surface,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Padding(
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(
                LucideIcons.checkCircle,
                color: Colors.green,
                size: 48,
              ),
              const SizedBox(height: 16),
              Text(
                'Report Generated Successfully!',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: theme.colorScheme.onSurface,
                ),
              ),
              const SizedBox(height: 8),
              Text(
                'Professional ECG report for $patientName is ready.',
                textAlign: TextAlign.center,
                style: TextStyle(
                  color: theme.colorScheme.onSurface.withOpacity(0.7),
                ),
              ),
              const SizedBox(height: 24),
              Row(
                children: [
                  Expanded(
                    child: OutlinedButton.icon(
                      onPressed: () async {
                        Navigator.of(context).pop();
                        await PDFReportService.shareReport(pdfFile, patientName);
                      },
                      icon: const Icon(LucideIcons.share2),
                      label: const Text('Share'),
                      style: OutlinedButton.styleFrom(
                        foregroundColor: const Color(0xFF2563EB),
                        side: const BorderSide(color: Color(0xFF2563EB)),
                      ),
                    ),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: ElevatedButton.icon(
                      onPressed: () async {
                        Navigator.of(context).pop();
                        await PDFReportService.printReport(pdfFile);
                      },
                      icon: const Icon(LucideIcons.printer),
                      label: const Text('Print'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: const Color(0xFF2563EB),
                        foregroundColor: Colors.white,
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _showErrorDialog(String message) {
    final theme = Theme.of(context);
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: theme.colorScheme.surface,
        title: Text(
          'Error',
          style: TextStyle(
            color: theme.colorScheme.onSurface,
          ),
        ),
        content: Text(
          message,
          style: TextStyle(
            color: theme.colorScheme.onSurface.withOpacity(0.7),
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('OK'),
          ),
        ],
      ),
    );
  }

  void _viewSessionDetails(ECGSession session) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => SessionDetailScreen(
          session: session,
          isDarkMode: Theme.of(context).brightness == Brightness.dark,
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    super.build(context); // Required for AutomaticKeepAliveClientMixin
    final theme = Theme.of(context);
    return Padding(
      padding: const EdgeInsets.all(24.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const SizedBox(height: 48),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                'ECG History',
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: theme.colorScheme.onBackground,
                ),
              ),
              IconButton(
                onPressed: () {
                  print('🔄 Manual refresh triggered');
                  _loadSessions();
                },
                icon: Icon(
                  LucideIcons.refreshCw,
                  color: theme.colorScheme.primary,
                ),
                tooltip: 'Refresh',
              ),
            ],
          ),
          const SizedBox(height: 24),
          
          if (_sessions.isEmpty)
            Expanded(
              child: Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(
                      LucideIcons.heartPulse,
                      size: 64,
                      color: theme.colorScheme.onBackground.withOpacity(0.3),
                    ),
                    const SizedBox(height: 16),
                    Text(
                      'No ECG recordings yet',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.w600,
                        color: theme.colorScheme.onBackground.withOpacity(0.6),
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'Start recording to see your ECG history here',
                      style: TextStyle(
                        color: theme.colorScheme.onBackground.withOpacity(0.5),
                      ),
                    ),
                    const SizedBox(height: 16),
                    // Debug button (remove in production)
                    ElevatedButton.icon(
                      onPressed: () async {
                        try {
                          print('🔍 Running history debug...');
                          final debugInfo = await FirebaseService.debugHistoryIssue();
                          print('🔍 Debug result: $debugInfo');
                          
                          // Show debug info in a dialog
                          showDialog(
                            context: context,
                            builder: (context) => AlertDialog(
                              title: Text('Debug Info'),
                              content: SingleChildScrollView(
                                child: Text(debugInfo.toString()),
                              ),
                              actions: [
                                TextButton(
                                  onPressed: () => Navigator.pop(context),
                                  child: Text('OK'),
                                ),
                              ],
                            ),
                          );
                        } catch (e) {
                          print('❌ Debug failed: $e');
                        }
                      },
                      icon: Icon(LucideIcons.bug),
                      label: Text('Debug History'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.orange,
                        foregroundColor: Colors.white,
                      ),
                    ),
                  ],
                ),
              ),
            )
          else
            Expanded(
              child: ListView.builder(
                itemCount: _sessions.length,
                itemBuilder: (context, index) {
                  final session = _sessions[index];
                  return _buildSessionCard(session);
                },
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildSessionCard(ECGSession session) {
    final theme = Theme.of(context);
    final isNormal = session.status.toLowerCase() == 'normal';
    
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: theme.colorScheme.surface,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: isNormal 
                      ? Colors.green.withOpacity(0.1) 
                      : Colors.orange.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Icon(
                  LucideIcons.heartPulse,
                  color: isNormal ? Colors.green : Colors.orange,
                  size: 20,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      _formatDateTime(session.timestamp),
                      style: TextStyle(
                        fontWeight: FontWeight.w600,
                        color: theme.colorScheme.onSurface,
                      ),
                    ),
                    const SizedBox(height: 2),
                    Text(
                      session.rhythm,
                      style: TextStyle(
                        fontSize: 12,
                        color: theme.colorScheme.onSurface.withOpacity(0.6),
                      ),
                    ),
                  ],
                ),
              ),
              Column(
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                    decoration: BoxDecoration(
                      color: isNormal 
                          ? Colors.green.withOpacity(theme.brightness == Brightness.dark ? 0.2 : 0.1)
                          : Colors.orange.withOpacity(theme.brightness == Brightness.dark ? 0.2 : 0.1),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Text(
                      session.status,
                      style: TextStyle(
                        fontSize: 12,
                        fontWeight: FontWeight.bold,
                        color: isNormal 
                            ? (theme.brightness == Brightness.dark ? Colors.green[300] : Colors.green[700])
                            : (theme.brightness == Brightness.dark ? Colors.orange[300] : Colors.orange[700]),
                      ),
                    ),
                  ),
                  const SizedBox(height: 8),
                  GestureDetector(
                    onTap: () => _shareRecord(session),
                    child: Container(
                      padding: const EdgeInsets.all(8),
                      decoration: BoxDecoration(
                        color: theme.colorScheme.surfaceVariant,
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Icon(
                        LucideIcons.share2,
                        size: 16,
                        color: theme.colorScheme.onSurfaceVariant,
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
          
          const SizedBox(height: 16),
          
          // Session metrics
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: theme.colorScheme.surfaceVariant.withOpacity(0.5),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                _buildMetric('Duration', '${session.duration.inSeconds}s'),
                _buildMetric('Avg BPM', '${session.avgBPM.round()}'),
                _buildMetric('Range', '${session.minBPM.round()}-${session.maxBPM.round()}'),
              ],
            ),
          ),
          
          const SizedBox(height: 16),
          
          // Action buttons
          Column(
            children: [
              Row(
                children: [
                  Expanded(
                    child: OutlinedButton(
                      onPressed: () => _viewSessionDetails(session),
                      style: OutlinedButton.styleFrom(
                        foregroundColor: const Color(0xFF2563EB),
                        side: const BorderSide(color: Color(0xFF2563EB)),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                      ),
                      child: const Text('View Details'),
                    ),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: ElevatedButton(
                      onPressed: () => _shareRecord(session),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: const Color(0xFF2563EB),
                        foregroundColor: Colors.white,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                      ),
                      child: const Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(LucideIcons.share2, size: 16),
                          SizedBox(width: 4),
                          Text('Share'),
                        ],
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 8),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton.icon(
                  onPressed: () => _generateProfessionalReport(session),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green,
                    foregroundColor: Colors.white,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                    padding: const EdgeInsets.symmetric(vertical: 12),
                  ),
                  icon: const Icon(LucideIcons.fileText, size: 18),
                  label: const Text('Generate Professional Report'),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildMetric(String label, String value) {
    final theme = Theme.of(context);
    return Column(
      children: [
        Text(
          value,
          style: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.bold,
            color: theme.colorScheme.onSurface,
          ),
        ),
        const SizedBox(height: 2),
        Text(
          label,
          style: TextStyle(
            fontSize: 12,
            color: theme.colorScheme.onSurface.withOpacity(0.6),
          ),
        ),
      ],
    );
  }
}
